# 这个文件是Gitlab CI自动构建部署的一个例子，使用maven构建工程，然后使用Docker打包镜像，最后自动部署到kubernetes环境

# This file is a template, and might need editing before it works on your project.
# Full project: https://gitlab.com/pages/plain-html

#pages:
#  stage: deploy
#  allow_failure: true
#  script:
#  - echo 'Nothing to do...'
#  artifacts:
#    paths:
#    - public
#  only:
#  - master
#  image: alpine:latest


image: docker:dind
variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"

  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line. `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  DOCKER_DRIVER: overlay
  REGISTRY: "registry.docker.com"
  TAG: "default/my-springboot"
  GIT_SSL_NO_VERIFY: "1"
  DOCKER_TLS_CERTDIR: "/certs"
  # kubernetes API Server访问地址
  K8_API_SERVER: "https://kubernetes.api.com"
  # kubernetes API Server的登录配置文件路径
  KUBECONFIG: "./kubernetes/kubeconfig"

services:
  - docker:dind
# Cache downloaded dependencies and plugins between builds.
cache:
  paths:
  - .m2/repository

# # This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# # Because some enforcer rules might check dependency convergence and class duplications
# # we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
# .validate: &validate
#   stage: build
#   script:
#   - 'mvn $MAVEN_CLI_OPTS test-compile'

# image: maven:3.3.9-jdk-8
# # Validate merge requests using JDK8
# validate:jdk8:
#   <<: *validate

stages:
  - build
  - package
  - deploy

# 构建 Job
build:
  stage: build
  image: maven:3.6.3-jdk-8
  # 使用tags可以选择运行的gitlab runner
  tags:
  - kubernetes
  script:
  - echo "=============== 开始编译构建任务 ==============="
  - 'mvn clean package -B'
  artifacts:
    paths:
      - target/*.jar

# 打包
package:
  stage: package
  tags:
  - kubernetes
  script:
  - echo "开始打包 Docker镜像..."
  - docker build -t $REGISTRY/$TAG:$CI_COMMIT_SHORT_SHA .
  - echo "Docker user $REGISTRY_USER email $REGISTRY_EMAIL login..."
  - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWD $REGISTRY
  - docker push $REGISTRY/$TAG:$CI_COMMIT_SHORT_SHA

# kubernetes部署
k8s-deploy-staging:
  image: kubectl:1.16.3
  tags:
    - kubernetes
  stage: deploy
  before_script:
  - export IMAGE=$REGISTRY/$TAG:$CI_COMMIT_SHORT_SHA
  - echo "修改image镜像为 $IMAGE ..."
  # 修改kubernetes/deployment.yaml文件中的镜像地址，$placeHolder是文件中的占位符
  - sed -i 's|\$placeHolder|'$IMAGE'|g' kubernetes/deployment.yaml
  - echo "修改后"
  - cat kubernetes/deployment.yaml | grep image
  script:
  - kubectl delete secret registry.docker.com --ignore-not-found=true --namespace default
  - kubectl create secret --namespace default docker-registry registry.docker.com \
    --docker-server=https://registry.docker.com --docker-username=$REGISTRY_USER \
    --docker-password=$REGISTRY_PASSWD --docker-email=REGISTRY_EMAIL
  - echo "配置本地kubectl登录信息..."
  - kubectl config set users.developer.token $K8_API_SERVER_TOKEN
  - echo "开始部署..."
  - kubectl --namespace default apply -k ./
  environment:
    name: staging
    url:
  only:
  - master  

k8s-deploy-production:
  image: kubectl:1.16.3
  tags:
    - k8s-deploy-production
  stage: deploy
  script:
  - echo "deploy to production environment of k8s cluster..."
  - kubectl delete secret registry.docker.com --ignore-not-found=true --namespace default
  - kubectl create secret --namespace default docker-registry registry.docker.com \
    --docker-server=https://registry.docker.com --docker-username=$REGISTRY_USER \
    --docker-password=$REGISTRY_PASSWD --docker-email=REGISTRY_EMAIL
  - kubectl apply -f deployment.yaml --namespace default
  environment:
    name: production
    url:
  when: manual
  only:
  - production